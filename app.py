import streamlit as st
import os
import sys
import time
import json
import pandas as pd
from datetime import datetime, timedelta

# Add project folder to system path
project_path = os.path.dirname(os.path.abspath(__file__))
sys.path.append(project_path)

# Import the orquestrador and other modules
from FSTech_Consulting_Agency.orquestrador_fstech import (
    fluxo_fstech, 
    consultor_agent, 
    suporte_agent, 
    gerente_marketing_agent, 
    coordenador_agent, 
    especialista_agent, 
    arquiteto_agent, 
    ceo_agent,
    analista_roi_agent,
    orquestrador
)

# Import ClickUp and Cal.com integrations
from FSTech_Consulting_Agency.utils.clickup_client import create_crm_task, update_task_status
from FSTech_Consulting_Agency.Suporte_Administrativo.tools.appointment_scheduler_manager import schedule_meeting_calcom

# Create cache for session state
if 'process_started' not in st.session_state:
    st.session_state.process_started = False
if 'current_step' not in st.session_state:
    st.session_state.current_step = 0
if 'client_name' not in st.session_state:
    st.session_state.client_name = ""
if 'client_company' not in st.session_state:
    st.session_state.client_company = ""
if 'client_email' not in st.session_state:
    st.session_state.client_email = ""
if 'briefing' not in st.session_state:
    st.session_state.briefing = ""
if 'lead_source' not in st.session_state:
    st.session_state.lead_source = ""
if 'objetivo_cliente' not in st.session_state:
    st.session_state.objetivo_cliente = ""
if 'logs' not in st.session_state:
    st.session_state.logs = []
if 'task_id' not in st.session_state:
    st.session_state.task_id = None
if 'client_message' not in st.session_state:
    st.session_state.client_message = ""
if 'proposal_content' not in st.session_state:
    st.session_state.proposal_content = ""
if 'arquitetura_proposta' not in st.session_state:
    st.session_state.arquitetura_proposta = ""
if 'roi_summary' not in st.session_state:
    st.session_state.roi_summary = ""
if 'meeting_id' not in st.session_state:
    st.session_state.meeting_id = None

# Helper functions
def add_log(message, agent="Sistema"):
    timestamp = datetime.now().strftime("%H:%M:%S")
    st.session_state.logs.append({
        "timestamp": timestamp,
        "agent": agent,
        "message": message
    })

def reset_session():
    st.session_state.process_started = False
    st.session_state.current_step = 0
    st.session_state.client_name = ""
    st.session_state.client_company = ""
    st.session_state.client_email = ""
    st.session_state.briefing = ""
    st.session_state.objetivo_cliente = ""
    st.session_state.lead_source = ""
    st.session_state.logs = []
    st.session_state.task_id = None
    st.session_state.client_message = ""
    st.session_state.proposal_content = ""
    st.session_state.arquitetura_proposta = ""
    st.session_state.roi_summary = ""
    st.session_state.meeting_id = None

# Streamlit UI
st.set_page_config(
    page_title="FSTech Consulting Agency",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Apply custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem !important;
        color: #0066cc;
    }
    .sub-header {
        font-size: 1.5rem !important;
        color: #4d4d4d;
    }
    .agent-card {
        border: 1px solid #e6e6e6;
        border-radius: 5px;
        padding: 1rem;
        margin-bottom: 1rem;
        background-color: #f9f9f9;
    }
    .agent-title {
        color: #0066cc;
        font-weight: bold;
    }
    .highlight {
        background-color: #ffd700;
        padding: 0.2rem;
        border-radius: 3px;
    }
    .footer {
        text-align: center;
        color: #888888;
        font-size: 0.8rem;
        margin-top: 3rem;
    }
</style>
""", unsafe_allow_html=True)

# Sidebar
st.sidebar.markdown("<h1 class='main-header'>FSTech Agency</h1>", unsafe_allow_html=True)
st.sidebar.markdown("---")

# Display available agents in sidebar
st.sidebar.markdown("<h2 class='sub-header'>Agentes Dispon√≠veis</h2>", unsafe_allow_html=True)
agents = {
    "Consultor de Diagn√≥stico": consultor_agent,
    "Suporte Administrativo": suporte_agent,
    "Gerente de Marketing Digital": gerente_marketing_agent,
    "Coordenador de Projetos": coordenador_agent,
    "Especialista T√©cnico": especialista_agent,
    "Arquiteto de Software": arquiteto_agent,
    "CEO": ceo_agent,
    "Analista de ROI": analista_roi_agent
}

selected_agent = st.sidebar.selectbox("Visualizar detalhes do agente:", list(agents.keys()))
with st.sidebar.expander(f"Detalhes: {selected_agent}", expanded=False):
    agent = agents[selected_agent]
    st.write(f"**Nome:** {agent.name}")
    
    # Get tools from the agent
    tools_list = []
    for tool in agent.tools:
        if hasattr(tool, "__name__"):
            tools_list.append(tool.__name__)
        elif hasattr(tool, "__func__"):
            tools_list.append(tool.__func__.__name__)
        else:
            tools_list.append(str(tool))
    
    st.write("**Ferramentas:**")
    for tool in tools_list:
        st.write(f"- {tool}")

# Main content
st.markdown("<h1 class='main-header'>FSTech Consulting Agency</h1>", unsafe_allow_html=True)
st.markdown("<h2 class='sub-header'>Sistema de Automa√ß√£o de Fluxo de Vendas</h2>", unsafe_allow_html=True)

# Cria√ß√£o das abas
tab_fluxo, tab_interacao, tab_logs, tab_sobre = st.tabs(["Fluxo Operacional", "Intera√ß√£o Livre", "Visualiza√ß√£o de Logs", "Sobre"])

# Tab 1: Fluxo Operacional
with tab_fluxo:
    if not st.session_state.process_started:
        st.markdown("### Iniciar Novo Fluxo de Venda")
        st.markdown("Preencha as informa√ß√µes abaixo para iniciar o processo de venda automatizado.")
        
        col1, col2 = st.columns(2)
        with col1:
            st.session_state.client_name = st.text_input("Nome do Cliente", st.session_state.client_name)
            st.session_state.client_company = st.text_input("Empresa do Cliente", st.session_state.client_company)
            st.session_state.client_email = st.text_input("Email do Cliente", st.session_state.client_email)
            st.session_state.lead_source = st.selectbox(
                "Origem do Lead", 
                ["LinkedIn", "Indica√ß√£o", "Website", "Email Marketing", "Outro"],
                index=0 if not st.session_state.lead_source else ["LinkedIn", "Indica√ß√£o", "Website", "Email Marketing", "Outro"].index(st.session_state.lead_source)
            )
        
        with col2:
            st.session_state.briefing = st.text_area(
                "Briefing Inicial", 
                st.session_state.briefing,
                height=120,
                placeholder="Descreva brevemente o projeto e necessidades do cliente..."
            )
            
            st.session_state.objetivo_cliente = st.text_area(
                "Objetivo Principal do Cliente", 
                st.session_state.objetivo_cliente,
                height=80,
                placeholder="Qual o principal objetivo do cliente com este projeto?"
            )
        
        if st.button("Iniciar Fluxo Operacional", type="primary"):
            if not st.session_state.client_name or not st.session_state.briefing:
                st.error("Por favor, preencha pelo menos o Nome do Cliente e o Briefing Inicial.")
            else:
                # Create ClickUp task for the new lead
                with st.spinner("Criando registro no CRM..."):
                    try:
                        task_name = f"Lead - {st.session_state.client_company or st.session_state.client_name}"
                        description = f"**Cliente:** {st.session_state.client_name}\n\n**Empresa:** {st.session_state.client_company}\n\n**Email:** {st.session_state.client_email}\n\n**Origem:** {st.session_state.lead_source}\n\n**Briefing:**\n{st.session_state.briefing}"
                        
                        task_id = create_crm_task(task_name, description)
                        if task_id:
                            st.session_state.task_id = task_id
                            add_log(f"Lead criado no CRM ClickUp com ID: {task_id}", "CRM")
                        else:
                            add_log("N√£o foi poss√≠vel criar o registro no CRM. Continuando sem integra√ß√£o.", "Sistema")
                    except Exception as e:
                        add_log(f"Erro ao criar lead no CRM: {str(e)}", "Sistema")
                
                st.session_state.process_started = True
                st.session_state.current_step = 1
                add_log(f"Iniciando fluxo para cliente: {st.session_state.client_name} da empresa {st.session_state.client_company}")
                st.rerun()
    
    else:
        # Display current process steps
        steps = [
            "Briefing Inicial", 
            "An√°lise de Oportunidade", 
            "Agendamento de Reuni√£o",
            "An√°lise T√©cnica", 
            "Pesquisa de Mercado", 
            "Gera√ß√£o de Proposta",
            "Envio e Negocia√ß√£o"
        ]
        
        step_progress = st.progress(st.session_state.current_step / len(steps))
        st.markdown(f"**Etapa Atual: {steps[st.session_state.current_step-1]}**")
        
        # Display client info
        st.markdown("### Informa√ß√µes do Cliente")
        col1, col2, col3 = st.columns(3)
        col1.markdown(f"**Cliente:** {st.session_state.client_name}")
        col2.markdown(f"**Empresa:** {st.session_state.client_company}")
        col3.markdown(f"**Origem do Lead:** {st.session_state.lead_source}")
        
        st.markdown("**Briefing:**")
        st.markdown(f"```{st.session_state.briefing}```")
        
        # Current step processing
        if st.session_state.current_step == 1:
            st.markdown("### Briefing Inicial")
            
            # Mostrar o briefing recebido
            with st.expander("Ver Briefing Recebido", expanded=True):
                st.markdown(f"**Cliente:** {st.session_state.client_name}")
                st.markdown(f"**Empresa:** {st.session_state.client_company}")
                st.markdown(f"**Email:** {st.session_state.client_email}")
                st.markdown("**Briefing:**")
                st.markdown(f"```{st.session_state.briefing}```")
            
            # Se a mensagem ainda n√£o foi gerada, mostrar bot√£o para an√°lise
            if st.session_state.client_message == "":
                st.markdown("### An√°lise do Briefing")
                st.markdown("O consultor de diagn√≥stico ir√° analisar o briefing e criar uma mensagem personalizada para envio ao cliente.")
                
                if st.button("Analisar Briefing e Criar Mensagem", type="primary"):
                    with st.spinner("Analisando briefing e gerando mensagem de abordagem..."):
                        # Generate client message based on briefing - foco em marcar reuni√£o
                        client_message = f"""Ol√° {st.session_state.client_name},

Muito obrigado por compartilhar seu projeto com a FSTech Consulting Agency!

Baseado no briefing inicial que voc√™ nos forneceu, identificamos oportunidades interessantes para auxiliar a {st.session_state.client_company} a alcan√ßar seus objetivos tecnol√≥gicos.

Para que possamos compreender melhor as necessidades do seu projeto e apresentar uma solu√ß√£o personalizada, gostar√≠amos de agendar uma reuni√£o de diagn√≥stico. 

Durante esta conversa, poderemos:
- Entender em detalhes os requisitos do projeto
- Esclarecer d√∫vidas t√©cnicas
- Discutir timelines e expectativas
- Apresentar nossa abordagem para resolver seus desafios

Voc√™ teria disponibilidade para uma reuni√£o esta semana? Caso positivo, indique alguns hor√°rios que sejam convenientes para voc√™.

Estamos entusiasmados com a possibilidade de trabalhar juntos neste projeto!

Atenciosamente,
Equipe FSTech Consulting Agency"""
                        
                        # Save client message to session state
                        st.session_state.client_message = client_message
                        
                        add_log("Briefing analisado. Mensagem de abordagem criada.", "Consultor de Diagn√≥stico")
                        time.sleep(1)  # Pequena pausa para feedback visual
                        st.rerun()
            
            # Se a mensagem j√° foi gerada, apresent√°-la para avalia√ß√£o e possibilitar envio manual
            if st.session_state.client_message:
                st.markdown("### Mensagem para Envio ao Cliente")
                st.markdown("Revise a mensagem gerada pelo Consultor de Diagn√≥stico. Voc√™ pode edit√°-la conforme necess√°rio.")
                
                message_box = st.text_area("Mensagem para o cliente", 
                                        st.session_state.client_message, 
                                        height=300)
                st.session_state.client_message = message_box
                
                # Facilitar a c√≥pia da mensagem
                if st.button("Copiar Mensagem"):
                    st.code(st.session_state.client_message, language="")
                    st.success("‚¨ÜÔ∏è Copie a mensagem acima e envie ao cliente manualmente via email ou seu canal preferido.")
                
                # Solicitar confirma√ß√£o de que a mensagem foi enviada
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("Confirmar Envio da Mensagem", type="primary"):
                        # Atualizar status no ClickUp para Contato Realizado
                        if st.session_state.task_id:
                            try:
                                update_task_status(st.session_state.task_id, "contato_realizado")
                                add_log("Status atualizado no CRM para 'Contato Realizado'", "CRM")
                            except Exception as e:
                                add_log(f"Erro ao atualizar status no CRM: {str(e)}", "Sistema")
                        
                        add_log("Mensagem de abordagem enviada ao cliente", "Consultor de Diagn√≥stico")
                        st.success("Mensagem enviada! Status atualizado no CRM. Aguarde a resposta do cliente para agendar a reuni√£o.")
                
                # Se a reuni√£o j√° foi agendada em resposta √† mensagem
                st.markdown("### A reuni√£o foi agendada?")
                st.markdown("Ap√≥s o envio da mensagem, o cliente respondeu sobre a reuni√£o?")
            
                # Solicitar informa√ß√µes de data e hora antes de confirmar agendamento
                if 'pre_agendamento' not in st.session_state:
                    st.session_state.pre_agendamento = False
                
                if not st.session_state.pre_agendamento:
                    st.markdown("#### Informa√ß√µes de Agendamento")
                    st.markdown("Por favor, informe a data e hor√°rio proposto pelo cliente para a reuni√£o:")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.session_state.data_proposta = st.date_input("Data da Reuni√£o Proposta")
                    with col2:
                        st.session_state.hora_proposta = st.time_input("Hor√°rio Proposto")
                    
                    st.session_state.local_reuniao = st.radio(
                        "Local da Reuni√£o",
                        options=["Videoconfer√™ncia", "Presencial", "Telefone"],
                        index=0
                    )
                    
                    if st.session_state.local_reuniao == "Presencial":
                        st.session_state.endereco_reuniao = st.text_input("Endere√ßo da Reuni√£o")
                    
                    if st.button("Salvar Informa√ß√µes de Agendamento", type="primary"):
                        data_hora = f"{st.session_state.data_proposta.strftime('%d/%m/%Y')} √†s {st.session_state.hora_proposta.strftime('%H:%M')}"
                        local = st.session_state.local_reuniao
                        if local == "Presencial" and st.session_state.endereco_reuniao:
                            local += f" - {st.session_state.endereco_reuniao}"
                        
                        st.session_state.info_reuniao = f"Reuni√£o marcada para {data_hora}. Local: {local}"
                        add_log(f"Informa√ß√µes de agendamento registradas: {st.session_state.info_reuniao}", "Consultor de Diagn√≥stico")
                        st.session_state.pre_agendamento = True
                        st.rerun()
                
                # Exibir informa√ß√µes de agendamento e solicitar confirma√ß√£o
                if st.session_state.pre_agendamento:
                    st.info(f"Informa√ß√µes de Agendamento: {st.session_state.info_reuniao}")
                    st.markdown("#### Confirmar Agendamento")
                    st.markdown("A reuni√£o foi confirmada com estas informa√ß√µes?")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button("Sim, Reuni√£o Confirmada‚úÖ", type="primary"):
                            # Update ClickUp task status
                            if st.session_state.task_id:
                                try:
                                    update_task_status(st.session_state.task_id, "reuniao_agendada")
                                    add_log("Status atualizado no CRM para 'Reuni√£o Agendada'", "CRM")
                                except Exception as e:
                                    add_log(f"Erro ao atualizar status no CRM: {str(e)}", "Sistema")
                            
                            # Salvar as informa√ß√µes de data e hora para reutilizar na etapa formal
                            st.session_state.data_reuniao_salva = st.session_state.data_proposta
                            st.session_state.hora_reuniao_salva = st.session_state.hora_proposta
                            st.session_state.local_reuniao_salvo = st.session_state.local_reuniao
                            if 'endereco_reuniao' in st.session_state:
                                st.session_state.endereco_reuniao_salvo = st.session_state.endereco_reuniao
                            
                            add_log(f"Reuni√£o com o cliente confirmada: {st.session_state.info_reuniao}", "Consultor de Diagn√≥stico")
                            st.success("Reuni√£o confirmada! Prosseguindo para o agendamento formal no sistema.")
                            time.sleep(1)  # Pequena pausa para feedback visual
                            st.session_state.current_step = 3  # Pula diretamente para o passo 3 (agendamento da reuni√£o)
                            st.rerun()
                    
                    with col2:
                        col2a, col2b = st.columns(2)
                        with col2a:
                            if st.button("Editar Informa√ß√µes"):
                                st.session_state.pre_agendamento = False
                                st.rerun()
                        
                        with col2b:
                            if st.button("N√£o, Ainda Aguardando"):
                                add_log("Aguardando resposta do cliente para confirma√ß√£o da reuni√£o", "Sistema")
                                st.info("Continue acompanhando. Voc√™ pode retornar mais tarde para atualizar o status.")
        
        elif st.session_state.current_step == 2:
            st.markdown("### An√°lise de Oportunidade")
            st.markdown("O CEO est√° avaliando o potencial da oportunidade...")
            
            complexidade = st.select_slider(
                "N√≠vel de Complexidade",
                options=["baixa", "m√©dia", "alta"],
                value="m√©dia"
            )
            
            if st.button("Analisar Oportunidade"):
                with st.spinner("Analisando..."):
                    time.sleep(2)  # Simula√ß√£o de processamento
                    add_log(f"Oportunidade analisada. Complexidade: {complexidade}", "CEO")
                    st.session_state.current_step = 3
                    st.rerun()
        elif st.session_state.current_step == 3:
            st.markdown("### Agendamento de Reuni√£o")
            st.markdown("O suporte administrativo est√° configurando a reuni√£o...")
            
            # Verificar se j√° temos informa√ß√µes de agendamento salvas da etapa anterior
            if 'data_reuniao_salva' in st.session_state and 'hora_reuniao_salva' in st.session_state:
                st.success("Dados de agendamento recuperados da etapa anterior")
                st.info(f"Data e hora j√° confirmados: {st.session_state.data_reuniao_salva.strftime('%d/%m/%Y')} √†s {st.session_state.hora_reuniao_salva.strftime('%H:%M')}")
                if 'local_reuniao_salvo' in st.session_state:
                    st.info(f"Local: {st.session_state.local_reuniao_salvo}")
                    if st.session_state.local_reuniao_salvo == "Presencial" and 'endereco_reuniao_salvo' in st.session_state:
                        st.info(f"Endere√ßo: {st.session_state.endereco_reuniao_salvo}")
            
            # Form for scheduling - j√° preenchido com dados anteriores quando dispon√≠veis
            col1, col2 = st.columns(2)
            with col1:
                data_reuniao = st.date_input("Data da Reuni√£o", 
                                          value=st.session_state.get("data_reuniao_salva", datetime.now().date()))
                duracao = st.selectbox("Dura√ß√£o", ["30 minutos", "1 hora", "1 hora e 30 minutos", "2 horas"], index=1)
                # Usando o ID fixo do Cal.com (1585329)
                event_type_id = 1585329
                st.info(f"Usando ID de Evento do Cal.com: {event_type_id}")
            with col2:
                hora_reuniao = st.time_input("Hora da Reuni√£o", 
                                           value=st.session_state.get("hora_reuniao_salva", datetime.now().time()))
                titulo_reuniao = st.text_input("T√≠tulo da Reuni√£o", 
                                              value=f"Reuni√£o de Diagn√≥stico - {st.session_state.client_company or st.session_state.client_name}")
                descricao_base = f"Discuss√£o dos requisitos do projeto com {st.session_state.client_name}\n\nPauta:\n1. Apresenta√ß√£o da equipe\n2. Detalhamento do briefing\n3. Levantamento de requisitos adicionais\n4. Pr√≥ximos passos"
                
                # Adicionar informa√ß√µes de local se dispon√≠veis
                if 'local_reuniao_salvo' in st.session_state:
                    local_info = f"\n\nLocal: {st.session_state.local_reuniao_salvo}"
                    if st.session_state.local_reuniao_salvo == "Presencial" and 'endereco_reuniao_salvo' in st.session_state:
                        local_info += f"\nEndere√ßo: {st.session_state.endereco_reuniao_salvo}"
                    descricao_base += local_info
                
                descricao_reuniao = st.text_area("Descri√ß√£o/Pauta", 
                                               value=descricao_base, 
                                               height=150)
            
            # Convert duration string to minutes
            duration_map = {
                "30 minutos": 30,
                "1 hora": 60,
                "1 hora e 30 minutos": 90,
                "2 horas": 120
            }
            duration_minutes = duration_map.get(duracao, 60)
            
            # Campo para for√ßar entrada do email, caso n√£o esteja no state
            if not st.session_state.get("client_email", "").strip():
                client_email = st.text_input("Email do cliente (obrigat√≥rio para agendamento)",
                                           value=st.session_state.get("client_email", ""),
                                           key="email_input_agendamento")
                if client_email and "@" in client_email:
                    st.session_state.client_email = client_email.strip()
                    st.success(f"Email do cliente registrado: {client_email}")
            
            # Mostra o email atual, se existir
            if st.session_state.get("client_email", "").strip():
                st.success(f"Email do cliente: {st.session_state.client_email}")
            
            if st.button("Agendar Reuni√£o no Cal.com"):
                if not st.session_state.get("client_email", "").strip():
                    st.error("Email do cliente √© obrigat√≥rio para agendar no Cal.com")
                else:
                    with st.spinner("Agendando no Cal.com..."):
                        try:
                            # Format datetime for Cal.com API with correct timezone for S√£o Paulo (UTC-3)
                            start_time = datetime.combine(data_reuniao, hora_reuniao)
                            end_time = start_time + timedelta(minutes=duration_minutes)
                            
                            # Format in ISO 8601 for Cal.com API - correct for S√£o Paulo (UTC-3)
                            # N√£o adicionar 'Z' ao final, pois isso indica UTC/GMT
                            # Em vez disso, usamos o timezone explicitamente no formato ISO 8601
                            start_iso = start_time.isoformat() + "-03:00"
                            end_iso = end_time.isoformat() + "-03:00"
                            
                            # Validar o email novamente
                            email = st.session_state.client_email.strip()
                            if not "@" in email or not "." in email.split("@")[1]:
                                st.error(f"Email '{email}' parece inv√°lido. Por favor, verifique o formato do email.")
                            else:
                                # Chamar a API do Cal.com
                                result = schedule_meeting_calcom(
                                    event_type_id=int(event_type_id),
                                    start_time=start_iso,
                                    end_time=end_iso,
                                    attendee_name=st.session_state.client_name,
                                    attendee_email=email,
                                    title=titulo_reuniao,
                                    description=descricao_reuniao
                                )
                                
                                # Processar o resultado
                                try:
                                    # Tentativa de converter a string de resposta para JSON
                                    if isinstance(result, str) and '{' in result:
                                        result_json = json.loads(result.replace("'", "\""))
                                    elif isinstance(result, dict):
                                        result_json = result
                                    else:
                                        result_json = None
                                        
                                    # Se temos um objeto JSON e ele tem status de sucesso, extrair ID
                                    if result_json and result_json.get('status') == 'success' and 'data' in result_json:
                                        booking_data = result_json['data']
                                        meeting_id = str(booking_data.get('id'))
                                        meeting_url = None
                                        
                                        # Try to get video call URL if available
                                        if 'videoCallUrl' in booking_data:
                                            meeting_url = booking_data['videoCallUrl']
                                        elif 'references' in booking_data:
                                            for ref in booking_data['references']:
                                                if ref.get('type') == 'google_meet_video' and 'meetingUrl' in ref:
                                                    meeting_url = ref['meetingUrl']
                                                    break
                                        
                                        st.session_state.meeting_id = meeting_id
                                        success_message = f"Reuni√£o agendada no Cal.com! ID: {meeting_id}"
                                        if meeting_url:
                                            success_message += f" | Link da videoconfer√™ncia: {meeting_url}"
                                        
                                        add_log(success_message, "Suporte Administrativo")
                                    # Caso o resultado contenha "sucesso" no formato texto (para compatibilidade)
                                    elif "sucesso" in str(result).lower() and "ID:" in str(result):
                                        meeting_id = str(result).split("ID:")[-1].strip()
                                        st.session_state.meeting_id = meeting_id
                                        add_log(f"Reuni√£o agendada no Cal.com! ID: {meeting_id}", "Suporte Administrativo")
                                    else:
                                        # Vamos considerar sucesso mesmo se o parsing falhar mas o agendamento for criado
                                        st.session_state.meeting_id = "unknown_id"
                                        add_log("Reuni√£o possivelmente agendada no Cal.com, mas n√£o foi poss√≠vel confirmar o ID", "Suporte Administrativo")
                                except Exception as parse_error:
                                    st.warning(f"Erro ao processar resposta do Cal.com: {parse_error}")
                                    # Assumimos que o agendamento foi feito
                                    st.session_state.meeting_id = "parsing_failed"
                                    add_log(f"Reuni√£o possivelmente agendada no Cal.com, erro ao processar resposta", "Suporte Administrativo")
                                
                                # Update ClickUp task status
                                if st.session_state.task_id:
                                    try:
                                        update_task_status(st.session_state.task_id, "reuniao_agendada")
                                        add_log("Status atualizado no CRM para 'Reuni√£o Agendada'", "CRM")
                                    except Exception as e:
                                        add_log(f"Erro ao atualizar status no CRM: {str(e)}", "Sistema")
                                
                                st.success(f"Reuni√£o agendada com sucesso para {data_reuniao} √†s {hora_reuniao}")
                                st.session_state.current_step = 4
                                time.sleep(1)  # Pequena pausa para feedback visual
                                st.rerun()
                        except Exception as e:
                            # Log error but allow manual scheduling
                            st.error(f"Erro ao integrar com Cal.com: {str(e)}")
                            add_log(f"Erro ao agendar no Cal.com: {str(e)}", "Sistema")
            
            # Manual scheduling option as fallback
            with st.expander("Agendar Manualmente (sem integra√ß√£o)"):
                st.info("Use esta op√ß√£o se a integra√ß√£o com Cal.com n√£o estiver dispon√≠vel.")
                if st.button("Confirmar Agendamento Manual"):
                    data_hora = f"{data_reuniao} √†s {hora_reuniao}"
                    add_log(f"Reuni√£o agendada manualmente para {data_hora}", "Suporte Administrativo")
                    
                    # Update ClickUp task status even for manual scheduling
                    if st.session_state.task_id:
                        try:
                            update_task_status(st.session_state.task_id, "reuniao_agendada")
                            add_log("Status atualizado no CRM para 'Reuni√£o Agendada'", "CRM")
                        except Exception as e:
                            add_log(f"Erro ao atualizar status no CRM: {str(e)}", "Sistema")
                            
                    st.success(f"Reuni√£o agendada manualmente para {data_hora}")
                    st.session_state.current_step = 4
                    time.sleep(1)  # Pequena pausa para feedback visual
                    st.rerun()
        
        # Etapas 4 a 7 seguem o mesmo padr√£o...
        elif st.session_state.current_step == 4:
            st.markdown("### An√°lise T√©cnica")
            st.markdown("O arquiteto de software est√° analisando os requisitos t√©cnicos...")
            
            if st.button("Realizar An√°lise T√©cnica"):
                with st.spinner("Analisando..."):
                    time.sleep(3)
                    add_log("An√°lise t√©cnica conclu√≠da. Solu√ß√£o vi√°vel.", "Arquiteto de Software")
                    st.session_state.current_step = 5
                    st.rerun()
                    
        elif st.session_state.current_step == 5:
            st.markdown("### Pesquisa de Mercado")
            st.markdown("O analista de ROI est√° realizando pesquisa de mercado e c√°lculo de ROI...")
            
            if st.button("Realizar Pesquisa de Mercado"):
                with st.spinner("Pesquisando..."):
                    time.sleep(3)
                    add_log("Pesquisa de mercado conclu√≠da. ROI estimado em 240%.", "Analista de ROI")
                    st.session_state.current_step = 6
                    st.rerun()
                    
        elif st.session_state.current_step == 6:
            st.markdown("### Gera√ß√£o de Proposta")
            
            # Verificar se a reuni√£o j√° foi marcada como realizada no ClickUp
            if 'reuniao_realizada' not in st.session_state or not st.session_state.reuniao_realizada:
                st.info("Antes de gerar a proposta, √© necess√°rio confirmar que a reuni√£o foi realizada.")
                
                st.markdown("#### A reuni√£o com o cliente foi realizada?")
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("Sim, Reuni√£o Realizada", type="primary"):
                        # Update ClickUp task status to "Reuni√£o Realizada"
                        if st.session_state.task_id:
                            try:
                                update_task_status(st.session_state.task_id, "reuniao_realizada")
                                add_log("Status atualizado no CRM para 'Reuni√£o Realizada'", "CRM")
                                st.success("Status atualizado com sucesso. Prosseguindo para gera√ß√£o da proposta.")
                                st.session_state.reuniao_realizada = True
                                time.sleep(1.5)  # Pausa para feedback visual
                                st.rerun()
                            except Exception as e:
                                add_log(f"Erro ao atualizar status no CRM: {str(e)}", "Sistema")
                                st.error(f"Erro ao atualizar status: {str(e)}")
                with col2:
                    if st.button("Reagendar Reuni√£o", type="secondary"):
                        st.session_state.current_step = 3  # Voltar para a etapa de agendamento
                        add_log("Reuni√£o precisou ser reagendada", "Consultor de Diagn√≥stico")
                        st.rerun()
            
            # Se a reuni√£o foi confirmada como realizada, mostrar a interface de gera√ß√£o de proposta
            if 'reuniao_realizada' in st.session_state and st.session_state.reuniao_realizada:
                st.markdown("O consultor est√° gerando a proposta comercial...")
                
                # Technical analysis summary displayed from previous step
                if st.session_state.arquitetura_proposta:
                    with st.expander("An√°lise T√©cnica do Arquiteto", expanded=False):
                        st.markdown(st.session_state.arquitetura_proposta)
            
            if 'reuniao_realizada' in st.session_state and st.session_state.reuniao_realizada:
                # ROI Analysis summary displayed from previous step
                if st.session_state.roi_summary:
                    with st.expander("An√°lise de ROI", expanded=False):
                        st.markdown(st.session_state.roi_summary)
                
                # Proposal parameters
                col1, col2 = st.columns(2)
                with col1:
                    valor_proposta = st.number_input("Valor da Proposta (R$)", min_value=1000, max_value=500000, value=15000, step=1000)
                    nivel_complexidade = st.selectbox("N√≠vel de Complexidade", ["baixa", "m√©dia", "alta"], index=1)
                
                with col2:
                    horas_estimadas = st.number_input("Horas Estimadas", min_value=10, max_value=1000, value=80, step=10)
                    timeline_map = {
                        "baixa": "2-3 semanas",
                        "m√©dia": "4-6 semanas",
                        "alta": "8-12 semanas"
                    }
                    timeline = timeline_map.get(nivel_complexidade, "4-8 semanas")
                    st.markdown(f"**Timeline Estimado:** {timeline}")
                
                # Generate proposal when button is clicked
                if st.session_state.proposal_content == "" and st.button("Gerar Proposta"):
                    with st.spinner("Gerando proposta comercial completa..."):
                        # If architecture or ROI analysis don't exist, create placeholders
                        if not st.session_state.arquitetura_proposta:
                            st.session_state.arquitetura_proposta = f"Nossa equipe analisou os requisitos do projeto e propomos uma arquitetura escal√°vel e segura que atender√° √†s necessidades da {st.session_state.client_company}.\n\nA solu√ß√£o incluir√°: an√°lise de requisitos, design de interface, desenvolvimento de APIs, integra√ß√£o com sistemas existentes, testes e implementa√ß√£o."
                        
                        if not st.session_state.roi_summary:
                            st.session_state.roi_summary = f"Baseado em nossa an√°lise, estimamos um ROI de 240% para este projeto em um per√≠odo de 12 meses.\n\nBenef√≠cios esperados:\n- Aumento de efici√™ncia operacional em 35%\n- Redu√ß√£o de custos operacionais em 25%\n- Melhoria na experi√™ncia do cliente\n- Tempo de retorno do investimento: 5 meses"
                        
                        # Generate markdown proposal
                        proposta = f"""# Proposta Comercial - {st.session_state.client_company}

## 1. Objetivos
De acordo com as informa√ß√µes compartilhadas durante nossa reuni√£o com {st.session_state.client_name}, entendemos que o principal objetivo √© {st.session_state.objetivo_cliente or 'desenvolver uma solu√ß√£o tecnol√≥gica que atenda √†s necessidades do neg√≥cio'}.

Briefing inicial:
> {st.session_state.briefing}

## 2. Solu√ß√£o Proposta
{st.session_state.arquitetura_proposta}

Complexidade estimada: **{nivel_complexidade.title()}**

## 3. Investimento

| Item | Detalhe | Valor |
| ---- | ------- | ----- |
| Desenvolvimento | {horas_estimadas} horas | R$ {valor_proposta:.2f} |
| Complexidade | {nivel_complexidade.upper()} | |
| Timeline estimado | {timeline} | |

## 4. Condi√ß√µes Comerciais

- **Prazo de Validade:** Esta proposta √© v√°lida por 15 dias a partir da data de emiss√£o.
- **Forma de Pagamento:** 40% no in√≠cio do projeto, 30% na entrega parcial e 30% na entrega final.
- **Suporte:** 3 meses de suporte t√©cnico inclusos ap√≥s a entrega final.

## 5. Pr√≥ximos Passos

1. Aceite da proposta
2. Assinatura de contrato
3. Reuni√£o de kick-off
4. In√≠cio do desenvolvimento

---

Agradecemos a oportunidade e estamos √† disposi√ß√£o para quaisquer esclarecimentos adicionais.

**FSTech Consulting Agency**  
www.fstechagency.com  
contato@fstechagency.com  
+55 11 9999-9999
"""
                    
                    # Save proposal to session state
                    st.session_state.proposal_content = proposta
                    
                    # Update ClickUp task status
                    if st.session_state.task_id:
                        try:
                            update_task_status(st.session_state.task_id, "proposta_enviada")
                            add_log("Status atualizado no CRM para 'Proposta Enviada'", "CRM")
                        except Exception as e:
                            add_log(f"Erro ao atualizar status no CRM: {str(e)}", "Sistema")
                    
                    add_log(f"Proposta gerada no valor de R$ {valor_proposta:.2f}", "Consultor de Diagn√≥stico")
                    time.sleep(1)  # Pequena pausa para feedback visual
            
            # Display proposal if generated
            if st.session_state.proposal_content:
                tabs = st.tabs(["Preview da Proposta", "C√≥digo Markdown"])
                
                with tabs[0]:
                    st.markdown(st.session_state.proposal_content)
                
                with tabs[1]:
                    st.code(st.session_state.proposal_content, language="markdown")
                    if st.button("Copiar C√≥digo Markdown"):
                        st.success("C√≥digo Markdown copiado! Cole em seu editor preferido ou envie diretamente.")
                
                # Bot√£o para confirmar que a proposta est√° pronta 
                if st.button("Proposta Finalizada - Pronta para Envio"):
                    add_log("Proposta finalizada e pronta para envio", "Consultor de Diagn√≥stico")
                    st.session_state.current_step = 7
                    st.rerun()
                    
        elif st.session_state.current_step == 7:
            st.markdown("### Envio e Negocia√ß√£o da Proposta")
            
            # Show the proposal again for reference
            if st.session_state.proposal_content:
                with st.expander("Visualizar Proposta", expanded=False):
                    st.markdown(st.session_state.proposal_content)
            
            # Primeiro, perguntar se a proposta foi enviada
            st.markdown("#### 1. Confirma√ß√£o de Envio da Proposta")
            st.info("Para continuar o fluxo, confirme se a proposta foi enviada ao cliente.")
            
            col1, col2 = st.columns(2)
            with col1:
                proposta_enviada = st.button("Sim, Proposta Enviada ao Cliente", type="primary")
                if proposta_enviada:
                    # Update ClickUp task status to Proposta Enviada
                    if st.session_state.task_id:
                        try:
                            update_task_status(st.session_state.task_id, "proposta_enviada")
                            add_log("Status atualizado no CRM para 'Proposta Enviada'", "CRM")
                            
                            # Ap√≥s confirmar o envio, automaticamente atualizar para Aguardando Resposta
                            time.sleep(1) # Pequena pausa
                            update_task_status(st.session_state.task_id, "aguardando_resposta")
                            add_log("Status atualizado no CRM para 'Aguardando Resposta'", "CRM")
                        except Exception as e:
                            add_log(f"Erro ao atualizar status no CRM: {str(e)}", "Sistema")
                    
                    add_log("Proposta enviada ao cliente. Aguardando resposta.", "Consultor de Diagn√≥stico")
                    st.success("Status atualizado: Proposta enviada e aguardando resposta do cliente.")
                    st.session_state.proposta_enviada = True
                    st.rerun()
            
            with col2:
                if st.button("N√£o, Ainda N√£o Enviada"):
                    st.warning("Envie a proposta ao cliente antes de continuar.")
                    st.session_state.proposta_enviada = False
            
            # Se a proposta j√° foi enviada, mostrar a etapa de confirma√ß√£o de aceite
            if 'proposta_enviada' in st.session_state and st.session_state.proposta_enviada:
                st.markdown("---")
                st.markdown("#### 2. Resposta do Cliente")
                st.info("A proposta foi enviada e est√° aguardando resposta do cliente. O cliente j√° respondeu?")
                
                col1, col2 = st.columns(2)
                with col1:
                    proposta_aceita = st.button("Sim, Proposta Foi Aceita", type="primary")
                    if proposta_aceita:
                        # Update ClickUp status to Proposta Aceita
                        if st.session_state.task_id:
                            try:
                                update_task_status(st.session_state.task_id, "proposta_aceita")
                                add_log("Status atualizado no CRM para 'Proposta Aceita'", "CRM")
                            except Exception as e:
                                add_log(f"Erro ao atualizar status no CRM: {str(e)}", "Sistema")
                        
                        add_log("üéâ Proposta aceita pelo cliente!", "Sistema")
                        st.success("Proposta aceita pelo cliente! Prosseguindo para confirma√ß√£o de pagamento.")
                        st.session_state.proposta_aceita = True
                        st.balloons()
                        st.rerun()
                
                with col2:
                    proposta_recusada = st.button("N√£o, Proposta Foi Recusada", type="secondary")
                    if proposta_recusada:
                        # Get feedback for rejection
                        motivo_recusa = st.text_area("Motivo da recusa", 
                                                    placeholder="Registre aqui o feedback do cliente sobre a recusa...")
                        if motivo_recusa:
                            add_log(f"Feedback de recusa: {motivo_recusa}", "Sistema")
                        
                        st.warning("Proposta recusada. Considere enviar uma nova proposta ajustada.")
                        
                        # Op√ß√£o para reiniciar processo
                        if st.button("Iniciar Novo Fluxo", key="novo_fluxo_recusado"):
                            reset_session()
                            st.rerun()
                        
                    ainda_aguardando = st.button("Ainda Aguardando Resposta")
                    if ainda_aguardando:
                        st.info("Continue acompanhando. Retorne quando o cliente responder.")
            
            # Se a proposta foi aceita, mostrar a etapa de confirma√ß√£o de pagamento
            if 'proposta_aceita' in st.session_state and st.session_state.proposta_aceita:
                st.markdown("---")
                st.markdown("#### 3. Confirma√ß√£o de Pagamento")
                st.info("A proposta foi aceita pelo cliente. O pagamento inicial j√° foi realizado?")
                
                col1, col2 = st.columns(2)
                with col1:
                    pagamento_realizado = st.button("Sim, Pagamento Realizado", type="primary")
                    if pagamento_realizado:
                        # Update ClickUp status to Venda Realizada
                        if st.session_state.task_id:
                            try:
                                update_task_status(st.session_state.task_id, "venda_realizada")
                                add_log("Status atualizado no CRM para 'Venda Realizada'", "CRM")
                            except Exception as e:
                                add_log(f"Erro ao atualizar status no CRM: {str(e)}", "Sistema")
                        
                        add_log("üí∞ Pagamento recebido! Venda conclu√≠da com sucesso.", "Sistema")
                        st.success("Pagamento confirmado! A venda foi realizada com sucesso.")
                        st.markdown("""
                        ### Pr√≥ximos Passos:
                        1. Iniciar o projeto
                        2. Configurar equipe de execu√ß√£o
                        3. Agendar reuni√£o de kick-off
                        """)
                        
                        # Op√ß√£o para reiniciar o processo
                        if st.button("Iniciar Novo Fluxo de Venda", type="primary"):
                            reset_session()
                            st.rerun()
                
                with col2:
                    aguardando_pagamento = st.button("N√£o, Aguardando Pagamento")
                    if aguardando_pagamento:
                        st.info("Continue acompanhando. Retorne quando o pagamento for confirmado.")
                        add_log("Aguardando confirma√ß√£o de pagamento.", "Sistema")
        
        # Bot√£o para reiniciar fluxo a qualquer momento
        if st.button("Cancelar Fluxo", type="secondary"):
            if st.button("Confirmar Cancelamento"):
                reset_session()
                st.rerun()

# Tab 2: Intera√ß√£o Livre
with tab_interacao:
    st.markdown("### Interagir Diretamente com o Orquestrador")
    st.markdown("Digite sua pergunta ou comando para interagir diretamente com o sistema.")
    
    user_input = st.text_area("Sua solicita√ß√£o:", height=100)
    
    if st.button("Enviar Solicita√ß√£o"):
        if user_input:
            with st.spinner("Processando..."):
                # Na vers√£o completa, chamar√≠amos diretamente o orquestrador
                # Aqui, simulamos uma resposta para evitar execu√ß√£o real
                st.markdown("**Resposta do Orquestrador:**")
                time.sleep(2)
                response = f"Sua solicita√ß√£o '{user_input}' foi processada. O orquestrador est√° trabalhando nisso."
                st.success(response)
                add_log(f"Solicita√ß√£o enviada: {user_input}", "Usu√°rio")
                add_log(response, "Orquestrador")
        else:
            st.error("Por favor, digite uma solicita√ß√£o.")

# Tab 3: Visualiza√ß√£o de Logs
with tab_logs:
    st.markdown("### Hist√≥rico de A√ß√µes")
    
    if not st.session_state.logs:
        st.info("Nenhuma a√ß√£o registrada ainda.")
    else:
        logs_df = pd.DataFrame(st.session_state.logs)
        st.dataframe(
            logs_df,
            column_config={
                "timestamp": "Hor√°rio",
                "agent": "Agente",
                "message": "Mensagem"
            },
            hide_index=True
        )
        
        if st.button("Limpar Hist√≥rico"):
            st.session_state.logs = []
            st.rerun()

# Tab 4: Sobre
with tab_sobre:
    st.markdown("### Sobre o FSTech Consulting Agency")
    st.markdown("""
    O **FSTech Consulting Agency** √© um sistema de automa√ß√£o de fluxo de vendas para servi√ßos de consultoria tecnol√≥gica.
    
    O sistema √© estruturado em m√∫ltiplos agentes especializados:
    
    * **Consultor de Diagn√≥stico**: respons√°vel por intake de clientes, diagn√≥stico inicial
    * **Suporte Administrativo**: gest√£o de agendamento e contato com clientes
    * **Gerente de Marketing Digital**: gera√ß√£o de conte√∫do e estrat√©gias de marketing
    * **Coordenador de Projetos**: acompanhamento de timelines e entreg√°veis
    * **Especialista T√©cnico**: implementa√ß√£o t√©cnica das solu√ß√µes
    * **Arquiteto de Software**: desenho de arquitetura e solu√ß√µes t√©cnicas
    * **CEO**: aprova√ß√£o de estrat√©gias e an√°lise de oportunidades
    * **Analista de ROI**: c√°lculo de retorno sobre investimento
    
    O fluxo operacional inclui: intake de briefing, an√°lise de oportunidade, agendamento de reuni√£o, an√°lise t√©cnica pelo arquiteto, pesquisa de mercado, gera√ß√£o de proposta, envio e negocia√ß√£o.
    """)
    
    st.markdown("### Tecnologias Utilizadas")
    st.markdown("""
    * Python
    * OpenAI GPT-4.1
    * Streamlit
    * ClickUp (CRM)
    * Cal.com (agendamento)
    """)

st.markdown("<div class='footer'>¬© 2025 FSTech Consulting Agency | Todos os direitos reservados</div>", unsafe_allow_html=True)
